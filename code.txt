font.c<q>:
~~~
/*
 * Copyright (c) 2015 Sergi Granell (xerpi)
 */

#include <stdio.h>
#include <stdarg.h>
#include <vita2d.h>
#include "font.h"

extern const unsigned char msx_font[];

void font_draw_char(int x, int y, unsigned int color, char c)
{
	unsigned char *font = (unsigned char *)(msx_font + (c - (unsigned int)' ') * 8);
	int i, j, pos_x, pos_y;
	for (i = 0; i < 8; ++i) {
		pos_y = y + i*2;
		for (j = 0; j < 8; ++j) {
			pos_x = x + j*2;
			if ((*font & (128 >> j))) {
				vita2d_draw_rectangle(pos_x, pos_y, 2, 2, color);
			}
		}
		++font;
	}
}

void font_draw_string(int x, int y, unsigned int color, const char *string)
{
	if (string == NULL) return;

	int startx = x;
	const char *s = string;

	while (*s) {
		if (*s == '\n') {
			x = startx;
			y += 16;
		} else if (*s == ' ') {
			x += 16;
		} else if(*s == '\t') {
			x += 16*4;
		} else {
			font_draw_char(x, y, color, *s);
			x += 16;
		}
		++s;
	}
}

void font_draw_stringf(int x, int y, unsigned int color, const char *s, ...)
{
	char buf[256];
	va_list argptr;
	va_start(argptr, s);
	vsnprintf(buf, sizeof(buf), s, argptr);
	va_end(argptr);
	font_draw_string(x, y, color, buf);
}

~~~

font_data.c<q>:
~~~
/*
 * PSP Software Development Kit - http://www.pspdev.org
 * -----------------------------------------------------------------------
 * Licensed under the BSD license, see LICENSE in PSPSDK root for details.
 *
 * font.c - Debug Font.
 *
 * Copyright (c) 2005 Marcus R. Brown <mrbrown@ocgnet.org>
 * Copyright (c) 2005 James Forshaw <tyranid@gmail.com>
 * Copyright (c) 2005 John Kelley <ps2dev@kelley.ca>
 *
 * $Id: font.c 540 2005-07-08 19:35:10Z warren $
 */

const unsigned char msx_font[] __attribute((aligned(4))) =
/*"\x00\x00\x00\x00\x00\x00\x00\x00\x3c\x42\xa5\x81\xa5\x99\x42\x3c"
"\x3c\x7e\xdb\xff\xff\xdb\x66\x3c\x6c\xfe\xfe\xfe\x7c\x38\x10\x00"
"\x10\x38\x7c\xfe\x7c\x38\x10\x00\x10\x38\x54\xfe\x54\x10\x38\x00"
"\x10\x38\x7c\xfe\xfe\x10\x38\x00\x00\x00\x00\x30\x30\x00\x00\x00"
"\xff\xff\xff\xe7\xe7\xff\xff\xff\x38\x44\x82\x82\x82\x44\x38\x00"
"\xc7\xbb\x7d\x7d\x7d\xbb\xc7\xff\x0f\x03\x05\x79\x88\x88\x88\x70"
"\x38\x44\x44\x44\x38\x10\x7c\x10\x30\x28\x24\x24\x28\x20\xe0\xc0"
"\x3c\x24\x3c\x24\x24\xe4\xdc\x18\x10\x54\x38\xee\x38\x54\x10\x00"
"\x10\x10\x10\x7c\x10\x10\x10\x10\x10\x10\x10\xff\x00\x00\x00\x00"
"\x00\x00\x00\xff\x10\x10\x10\x10\x10\x10\x10\xf0\x10\x10\x10\x10"
"\x10\x10\x10\x1f\x10\x10\x10\x10\x10\x10\x10\xff\x10\x10\x10\x10"
"\x10\x10\x10\x10\x10\x10\x10\x10\x00\x00\x00\xff\x00\x00\x00\x00"
"\x00\x00\x00\x1f\x10\x10\x10\x10\x00\x00\x00\xf0\x10\x10\x10\x10"
"\x10\x10\x10\x1f\x00\x00\x00\x00\x10\x10\x10\xf0\x00\x00\x00\x00"
"\x81\x42\x24\x18\x18\x24\x42\x81\x01\x02\x04\x08\x10\x20\x40\x80"
"\x80\x40\x20\x10\x08\x04\x02\x01\x00\x10\x10\xff\x10\x10\x00\x00"*/
"\x00\x00\x00\x00\x00\x00\x00\x00\x20\x20\x20\x20\x00\x00\x20\x00"
"\x50\x50\x50\x00\x00\x00\x00\x00\x50\x50\xf8\x50\xf8\x50\x50\x00"
"\x20\x78\xa0\x70\x28\xf0\x20\x00\xc0\xc8\x10\x20\x40\x98\x18\x00"
"\x40\xa0\x40\xa8\x90\x98\x60\x00\x10\x20\x40\x00\x00\x00\x00\x00"
"\x10\x20\x40\x40\x40\x20\x10\x00\x40\x20\x10\x10\x10\x20\x40\x00"
"\x20\xa8\x70\x20\x70\xa8\x20\x00\x00\x20\x20\xf8\x20\x20\x00\x00"
"\x00\x00\x00\x00\x00\x20\x20\x40\x00\x00\x00\x78\x00\x00\x00\x00"
"\x00\x00\x00\x00\x00\x60\x60\x00\x00\x00\x08\x10\x20\x40\x80\x00"
"\x70\x88\x98\xa8\xc8\x88\x70\x00\x20\x60\xa0\x20\x20\x20\xf8\x00"
"\x70\x88\x08\x10\x60\x80\xf8\x00\x70\x88\x08\x30\x08\x88\x70\x00"
"\x10\x30\x50\x90\xf8\x10\x10\x00\xf8\x80\xe0\x10\x08\x10\xe0\x00"
"\x30\x40\x80\xf0\x88\x88\x70\x00\xf8\x88\x10\x20\x20\x20\x20\x00"
"\x70\x88\x88\x70\x88\x88\x70\x00\x70\x88\x88\x78\x08\x10\x60\x00"
"\x00\x00\x20\x00\x00\x20\x00\x00\x00\x00\x20\x00\x00\x20\x20\x40"
"\x18\x30\x60\xc0\x60\x30\x18\x00\x00\x00\xf8\x00\xf8\x00\x00\x00"
"\xc0\x60\x30\x18\x30\x60\xc0\x00\x70\x88\x08\x10\x20\x00\x20\x00"
"\x70\x88\x08\x68\xa8\xa8\x70\x00\x20\x50\x88\x88\xf8\x88\x88\x00"
"\xf0\x48\x48\x70\x48\x48\xf0\x00\x30\x48\x80\x80\x80\x48\x30\x00"
"\xe0\x50\x48\x48\x48\x50\xe0\x00\xf8\x80\x80\xf0\x80\x80\xf8\x00"
"\xf8\x80\x80\xf0\x80\x80\x80\x00\x70\x88\x80\xb8\x88\x88\x70\x00"
"\x88\x88\x88\xf8\x88\x88\x88\x00\x70\x20\x20\x20\x20\x20\x70\x00"
"\x38\x10\x10\x10\x90\x90\x60\x00\x88\x90\xa0\xc0\xa0\x90\x88\x00"
"\x80\x80\x80\x80\x80\x80\xf8\x00\x88\xd8\xa8\xa8\x88\x88\x88\x00"
"\x88\xc8\xc8\xa8\x98\x98\x88\x00\x70\x88\x88\x88\x88\x88\x70\x00"
"\xf0\x88\x88\xf0\x80\x80\x80\x00\x70\x88\x88\x88\xa8\x90\x68\x00"
"\xf0\x88\x88\xf0\xa0\x90\x88\x00\x70\x88\x80\x70\x08\x88\x70\x00"
"\xf8\x20\x20\x20\x20\x20\x20\x00\x88\x88\x88\x88\x88\x88\x70\x00"
"\x88\x88\x88\x88\x50\x50\x20\x00\x88\x88\x88\xa8\xa8\xd8\x88\x00"
"\x88\x88\x50\x20\x50\x88\x88\x00\x88\x88\x88\x70\x20\x20\x20\x00"
"\xf8\x08\x10\x20\x40\x80\xf8\x00\x70\x40\x40\x40\x40\x40\x70\x00"
"\x00\x00\x80\x40\x20\x10\x08\x00\x70\x10\x10\x10\x10\x10\x70\x00"
"\x20\x50\x88\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf8\x00"
"\x40\x20\x10\x00\x00\x00\x00\x00\x00\x00\x70\x08\x78\x88\x78\x00"
"\x80\x80\xb0\xc8\x88\xc8\xb0\x00\x00\x00\x70\x88\x80\x88\x70\x00"
"\x08\x08\x68\x98\x88\x98\x68\x00\x00\x00\x70\x88\xf8\x80\x70\x00"
"\x10\x28\x20\xf8\x20\x20\x20\x00\x00\x00\x68\x98\x98\x68\x08\x70"
"\x80\x80\xf0\x88\x88\x88\x88\x00\x20\x00\x60\x20\x20\x20\x70\x00"
"\x10\x00\x30\x10\x10\x10\x90\x60\x40\x40\x48\x50\x60\x50\x48\x00"
"\x60\x20\x20\x20\x20\x20\x70\x00\x00\x00\xd0\xa8\xa8\xa8\xa8\x00"
"\x00\x00\xb0\xc8\x88\x88\x88\x00\x00\x00\x70\x88\x88\x88\x70\x00"
"\x00\x00\xb0\xc8\xc8\xb0\x80\x80\x00\x00\x68\x98\x98\x68\x08\x08"
"\x00\x00\xb0\xc8\x80\x80\x80\x00\x00\x00\x78\x80\xf0\x08\xf0\x00"
"\x40\x40\xf0\x40\x40\x48\x30\x00\x00\x00\x90\x90\x90\x90\x68\x00"
"\x00\x00\x88\x88\x88\x50\x20\x00\x00\x00\x88\xa8\xa8\xa8\x50\x00"
"\x00\x00\x88\x50\x20\x50\x88\x00\x00\x00\x88\x88\x98\x68\x08\x70"
"\x00\x00\xf8\x10\x20\x40\xf8\x00\x18\x20\x20\x40\x20\x20\x18\x00"
"\x20\x20\x20\x00\x20\x20\x20\x00\xc0\x20\x20\x10\x20\x20\xc0\x00"
"\x40\xa8\x10\x00\x00\x00\x00\x00\x00\x00\x20\x50\xf8\x00\x00\x00"
"\x70\x88\x80\x80\x88\x70\x20\x60\x90\x00\x00\x90\x90\x90\x68\x00"
/*"\x10\x20\x70\x88\xf8\x80\x70\x00\x20\x50\x70\x08\x78\x88\x78\x00"
"\x48\x00\x70\x08\x78\x88\x78\x00\x20\x10\x70\x08\x78\x88\x78\x00"
"\x20\x00\x70\x08\x78\x88\x78\x00\x00\x70\x80\x80\x80\x70\x10\x60"
"\x20\x50\x70\x88\xf8\x80\x70\x00\x50\x00\x70\x88\xf8\x80\x70\x00"
"\x20\x10\x70\x88\xf8\x80\x70\x00\x50\x00\x00\x60\x20\x20\x70\x00"
"\x20\x50\x00\x60\x20\x20\x70\x00\x40\x20\x00\x60\x20\x20\x70\x00"
"\x50\x00\x20\x50\x88\xf8\x88\x00\x20\x00\x20\x50\x88\xf8\x88\x00"
"\x10\x20\xf8\x80\xf0\x80\xf8\x00\x00\x00\x6c\x12\x7e\x90\x6e\x00"
"\x3e\x50\x90\x9c\xf0\x90\x9e\x00\x60\x90\x00\x60\x90\x90\x60\x00"
"\x90\x00\x00\x60\x90\x90\x60\x00\x40\x20\x00\x60\x90\x90\x60\x00"
"\x40\xa0\x00\xa0\xa0\xa0\x50\x00\x40\x20\x00\xa0\xa0\xa0\x50\x00"
"\x90\x00\x90\x90\xb0\x50\x10\xe0\x50\x00\x70\x88\x88\x88\x70\x00"
"\x50\x00\x88\x88\x88\x88\x70\x00\x20\x20\x78\x80\x80\x78\x20\x20"
"\x18\x24\x20\xf8\x20\xe2\x5c\x00\x88\x50\x20\xf8\x20\xf8\x20\x00"
"\xc0\xa0\xa0\xc8\x9c\x88\x88\x8c\x18\x20\x20\xf8\x20\x20\x20\x40"
"\x10\x20\x70\x08\x78\x88\x78\x00\x10\x20\x00\x60\x20\x20\x70\x00"
"\x20\x40\x00\x60\x90\x90\x60\x00\x20\x40\x00\x90\x90\x90\x68\x00"
"\x50\xa0\x00\xa0\xd0\x90\x90\x00\x28\x50\x00\xc8\xa8\x98\x88\x00"
"\x00\x70\x08\x78\x88\x78\x00\xf8\x00\x60\x90\x90\x90\x60\x00\xf0"
"\x20\x00\x20\x40\x80\x88\x70\x00\x00\x00\x00\xf8\x80\x80\x00\x00"
"\x00\x00\x00\xf8\x08\x08\x00\x00\x84\x88\x90\xa8\x54\x84\x08\x1c"
"\x84\x88\x90\xa8\x58\xa8\x3c\x08\x20\x00\x00\x20\x20\x20\x20\x00"
"\x00\x00\x24\x48\x90\x48\x24\x00\x00\x00\x90\x48\x24\x48\x90\x00"
"\x28\x50\x20\x50\x88\xf8\x88\x00\x28\x50\x70\x08\x78\x88\x78\x00"
"\x28\x50\x00\x70\x20\x20\x70\x00\x28\x50\x00\x20\x20\x20\x70\x00"
"\x28\x50\x00\x70\x88\x88\x70\x00\x50\xa0\x00\x60\x90\x90\x60\x00"
"\x28\x50\x00\x88\x88\x88\x70\x00\x50\xa0\x00\xa0\xa0\xa0\x50\x00"
"\xfc\x48\x48\x48\xe8\x08\x50\x20\x00\x50\x00\x50\x50\x50\x10\x20"
"\xc0\x44\xc8\x54\xec\x54\x9e\x04\x10\xa8\x40\x00\x00\x00\x00\x00"
"\x00\x20\x50\x88\x50\x20\x00\x00\x88\x10\x20\x40\x80\x28\x00\x00"
"\x7c\xa8\xa8\x68\x28\x28\x28\x00\x38\x40\x30\x48\x48\x30\x08\x70"
"\x00\x00\x00\x00\x00\x00\xff\xff\xf0\xf0\xf0\xf0\x0f\x0f\x0f\x0f"
"\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00"
"\x00\x00\x00\x3c\x3c\x00\x00\x00\xff\xff\xff\xff\xff\xff\x00\x00"
"\xc0\xc0\xc0\xc0\xc0\xc0\xc0\xc0\x0f\x0f\x0f\x0f\xf0\xf0\xf0\xf0"
"\xfc\xfc\xfc\xfc\xfc\xfc\xfc\xfc\x03\x03\x03\x03\x03\x03\x03\x03"
"\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x11\x22\x44\x88\x11\x22\x44\x88"
"\x88\x44\x22\x11\x88\x44\x22\x11\xfe\x7c\x38\x10\x00\x00\x00\x00"
"\x00\x00\x00\x00\x10\x38\x7c\xfe\x80\xc0\xe0\xf0\xe0\xc0\x80\x00"
"\x01\x03\x07\x0f\x07\x03\x01\x00\xff\x7e\x3c\x18\x18\x3c\x7e\xff"
"\x81\xc3\xe7\xff\xff\xe7\xc3\x81\xf0\xf0\xf0\xf0\x00\x00\x00\x00"
"\x00\x00\x00\x00\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x00\x00\x00\x00"
"\x00\x00\x00\x00\xf0\xf0\xf0\xf0\x33\x33\xcc\xcc\x33\x33\xcc\xcc"
"\x00\x20\x20\x50\x50\x88\xf8\x00\x20\x20\x70\x20\x70\x20\x20\x00"
"\x00\x00\x00\x50\x88\xa8\x50\x00\xff\xff\xff\xff\xff\xff\xff\xff"
"\x00\x00\x00\x00\xff\xff\xff\xff\xf0\xf0\xf0\xf0\xf0\xf0\xf0\xf0"
"\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\xff\xff\xff\xff\x00\x00\x00\x00"
"\x00\x00\x68\x90\x90\x90\x68\x00\x30\x48\x48\x70\x48\x48\x70\xc0"
"\xf8\x88\x80\x80\x80\x80\x80\x00\xf8\x50\x50\x50\x50\x50\x98\x00"
"\xf8\x88\x40\x20\x40\x88\xf8\x00\x00\x00\x78\x90\x90\x90\x60\x00"
"\x00\x50\x50\x50\x50\x68\x80\x80\x00\x50\xa0\x20\x20\x20\x20\x00"
"\xf8\x20\x70\xa8\xa8\x70\x20\xf8\x20\x50\x88\xf8\x88\x50\x20\x00"
"\x70\x88\x88\x88\x50\x50\xd8\x00\x30\x40\x40\x20\x50\x50\x50\x20"
"\x00\x00\x00\x50\xa8\xa8\x50\x00\x08\x70\xa8\xa8\xa8\x70\x80\x00"
"\x38\x40\x80\xf8\x80\x40\x38\x00\x70\x88\x88\x88\x88\x88\x88\x00"
"\x00\xf8\x00\xf8\x00\xf8\x00\x00\x20\x20\xf8\x20\x20\x00\xf8\x00"
"\xc0\x30\x08\x30\xc0\x00\xf8\x00\x18\x60\x80\x60\x18\x00\xf8\x00"
"\x10\x28\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\xa0\x40"
"\x00\x20\x00\xf8\x00\x20\x00\x00\x00\x50\xa0\x00\x50\xa0\x00\x00"
"\x00\x18\x24\x24\x18\x00\x00\x00\x00\x30\x78\x78\x30\x00\x00\x00"
"\x00\x00\x00\x00\x30\x00\x00\x00\x3e\x20\x20\x20\xa0\x60\x20\x00"
"\xa0\x50\x50\x50\x00\x00\x00\x00\x40\xa0\x20\x40\xe0\x00\x00\x00"
"\x00\x38\x38\x38\x38\x38\x38\x00\x00\x00\x00\x00\x00\x00\x00"*/;
~~~

font.h<q>:
~~~
/*
 * Copyright (c) 2015 Sergi Granell (xerpi)
 */

#ifndef FONT_H
#define FONT_H

#include <psp2/types.h>

void font_draw_char(int x, int y, unsigned int color, char c);
void font_draw_string(int x, int y, unsigned int color, const char *string);
void font_draw_stringf(int x, int y, unsigned int color, const char *s, ...);

#endif
~~~

json.c<q>:
~~~

#include <jansson.h>
#include <stdlib.h>
#include <string.h>
#include "json.h"

ParsedJSON parse_json(const char *file_name) {
    json_error_t error;
    json_t *root = json_load_file(file_name, 0, &error);
    ParsedJSON parsed_json = { .count = 0, .items = NULL, .background_url = NULL }; // Initialize items to NULL

    if (!root) {
        fprintf(stderr, "error: on line %d: %s\n", error.line, error.text);
        return parsed_json;
    }

    // Get the background URL
    json_t *background_json = json_object_get(root, "background");
    if (json_is_string(background_json)) {
        parsed_json.background_url = strdup(json_string_value(background_json));
    }

    json_t *items = json_object_get(root, "items");
    if (!json_is_array(items)) {
        fprintf(stderr, "error: items is not an array\n");
        json_decref(root);
        return parsed_json;
    }

    int item_count = json_array_size(items);
    parsed_json.items = malloc(item_count * sizeof(char *)); // Allocate memory for items
    parsed_json.count = item_count;

    int i;
    for (i = 0; i < item_count; i++) {
        json_t *item = json_array_get(items, i);
        json_t *name_json = json_object_get(item, "name");
        const char *item_text = json_string_value(name_json);
        if (item_text) {
            parsed_json.items[i] = strdup(item_text);
        }
    }

    json_decref(root);
    return parsed_json;
}
~~~

json.h<q>:
~~~

#ifndef JSON_H
#define JSON_H

#include <jansson.h>

typedef struct {
    char **items; // Changed to a pointer
    int count;
    char *background_url;
} ParsedJSON;

ParsedJSON parse_json(const char *file_name);

#endif // JSON_H
~~~

main.c<q>:
~~~
#include <psp2/display.h>
#include <psp2/kernel/processmgr.h>
#include <psp2/kernel/threadmgr.h> // Include for delay function
#include <psp2/ctrl.h>             // Add this for controller input
#include <psp2/net/net.h>          // Add this for network functions
#include <psp2/net/netctl.h>
#include <psp2/sysmodule.h>

#include <vita2d.h>
#include "font.h"
#include "network.h"
#include "json.h"

#define SCREEN_WIDTH 960
#define SCREEN_HEIGHT 544

#define TITLE_BAR_HEIGHT 30
#define CONTENT_AREA TITLE_BAR_HEIGHT
#define CONTENT_HEIGHT (SCREEN_HEIGHT - TITLE_BAR_HEIGHT)
#define ITEM_HEIGHT 40 // Height of each list item

#define BACKGROUND_IMAGE "ux0:data/wallpaper.png" // File name for the downloaded background image

int selected_item = 0;   // Index of the currently selected item
int delay_counter = 0;   // Counter to track delay
int INITIAL_DELAY = 200; // Initial delay in ms
int NORMAL_DELAY = 200;  // Normal delay in ms

int ITEMS_PER_PAGE = 10; // Number of items per page

ParsedJSON parsed_json;

vita2d_pgf *font;
vita2d_texture *background_texture; // Texture for the background image

int initNet()
{
    sceSysmoduleLoadModule(SCE_SYSMODULE_NET);
    SceNetInitParam initparam;
    int size = 1 * 1024 * 1024;
    initparam.memory = malloc(size);
    initparam.size = size;
    initparam.flags = 0;

    int result = sceNetInit(&initparam);
    if (result != 0 && result != SCE_NET_ERROR_EBUSY)
    {
        // Handle the error
        return result;
    }

    sceNetCtlInit();

    return 0;
}

void display_json_items(ParsedJSON parsed_json, int page)
{
    int start_index = page * ITEMS_PER_PAGE;
    int end_index = start_index + ITEMS_PER_PAGE - 1;
    if (end_index >= parsed_json.count)
    {
        end_index = parsed_json.count - 1;
    }

    int y = CONTENT_AREA; // Start at CONTENT_AREA
    for (int i = start_index; i <= end_index; i++)
    {
        const char *item_name = parsed_json.items[i];

        // Determine the color based on the selection
        uint32_t color = (i == selected_item) ? RGBA8(0xFF, 0x00, 0x00, 0xFF) : RGBA8(0xFF, 0xFF, 0xFF, 0xFF);

        font_draw_string(10, y, color, item_name);
        y += ITEM_HEIGHT;
    }
}

void drawpage(int current_page, int total_pages)
{
    vita2d_start_drawing();
    vita2d_clear_screen();

    // Draw the background texture in the content area if it's valid
    if (background_texture != NULL) {
        vita2d_draw_texture(background_texture, 0, CONTENT_AREA); // Draw at (0, 0) for debugging
    }
    else {
        vita2d_draw_rectangle(0, CONTENT_AREA, SCREEN_WIDTH, CONTENT_HEIGHT, RGBA8(0xFF, 0x00, 0x00, 0xFF));
    }

    // Draw title bar
    vita2d_draw_rectangle(0, 0, SCREEN_WIDTH, TITLE_BAR_HEIGHT, RGBA8(0x00, 0x00, 0xFF, 0xFF));
    font_draw_string(10, 5, RGBA8(0xFF, 0xFF, 0xFF, 0xFF), "Yuki's First Vita Application");

    // Draw content area
    vita2d_draw_rectangle(0, TITLE_BAR_HEIGHT, SCREEN_WIDTH, CONTENT_HEIGHT, RGBA8(0x00, 0x00, 0x00, 0x55));

    display_json_items(parsed_json, current_page); // Display the current page

    // Draw footer bar
    vita2d_draw_rectangle(0, SCREEN_HEIGHT - TITLE_BAR_HEIGHT, SCREEN_WIDTH, TITLE_BAR_HEIGHT, RGBA8(0x00, 0x00, 0xFF, 0xFF));

    // Create the footer text
    char footer_text[20]; // Assuming the footer text won't exceed 20 characters
    snprintf(footer_text, sizeof(footer_text), "%d/%d", current_page + 1, total_pages);

    // Draw the footer text
    font_draw_string(10, SCREEN_HEIGHT - TITLE_BAR_HEIGHT + 5, RGBA8(0xFF, 0xFF, 0xFF, 0xFF), footer_text);
    vita2d_end_drawing();
    vita2d_swap_buffers();
}

int main()
{
    vita2d_init();
    initNet();
    font = vita2d_load_default_pgf();

    // Download and parse JSON
    const char *url = "http://sharkdash.blahaj.nl/vita/vita.json";
    const char *file_name = "ux0:data/downloaded.json";
    download_data(url, file_name);
    parsed_json = parse_json(file_name);
    download_data(parsed_json.background_url, BACKGROUND_IMAGE);
    background_texture = vita2d_load_PNG_file(BACKGROUND_IMAGE); // Load the background texture
    if (background_texture == NULL) {
        printf("Failed to load background texture.\n");
    }


    SceCtrlData pad;                                   // Declare the controller input variable
    sceCtrlSetSamplingMode(SCE_CTRL_MODE_ANALOG_WIDE); // Set D-pad mode

    int was_holding_dpad = 0;        // Track if the dpad was held previously
    unsigned int next_move_time = 0; // Time when the next move is allowed
    unsigned int current_delay = 0;  // Current delay (initial or normal)

    int total_pages = (parsed_json.count + 9) / 10; // Calculate the total number of pages
    int current_page = 0;                           // Initialize the current page to 0

    while (1)
    {
        sceCtrlPeekBufferPositive(0, &pad, 1);

        unsigned int current_time = sceKernelGetProcessTimeLow();

        if (pad.buttons & SCE_CTRL_SELECT)
        {
            break;
        }

        if (pad.buttons & SCE_CTRL_LTRIGGER)
        {
            selected_item = 0;
        }

        if (pad.buttons & SCE_CTRL_RTRIGGER)
        {
            selected_item = parsed_json.count - 1;
        }

        if (pad.buttons & (SCE_CTRL_DOWN | SCE_CTRL_UP))
        {
            if (!was_holding_dpad)
            {
                selected_item = (selected_item + (pad.buttons & SCE_CTRL_DOWN ? 1 : -1) + parsed_json.count) % parsed_json.count;
                was_holding_dpad = 1;
                current_delay = INITIAL_DELAY;
                next_move_time = current_time + current_delay * 1000;

                // Update current_page if the selection goes off the current page
                if (selected_item < current_page * ITEMS_PER_PAGE || selected_item >= (current_page + 1) * ITEMS_PER_PAGE)
                {
                    current_page = selected_item / ITEMS_PER_PAGE;
                }
            }
            else if (current_time >= next_move_time)
            {
                selected_item = (selected_item + (pad.buttons & SCE_CTRL_DOWN ? 1 : -1) + parsed_json.count) % parsed_json.count;
                current_delay = NORMAL_DELAY;
                next_move_time = current_time + current_delay * 250;

                // Update current_page if the selection goes off the current page
                if (selected_item < current_page * ITEMS_PER_PAGE || selected_item >= (current_page + 1) * ITEMS_PER_PAGE)
                {
                    current_page = selected_item / ITEMS_PER_PAGE;
                }
            }
        } else if (pad.buttons & (SCE_CTRL_LEFT | SCE_CTRL_RIGHT))
        {
            if (!was_holding_dpad)
            {
                current_page = (current_page + (pad.buttons & SCE_CTRL_RIGHT ? 1 : -1) + total_pages) % total_pages;
                was_holding_dpad = 1;
                current_delay = INITIAL_DELAY;
                next_move_time = current_time + current_delay * 1000;
            }
            else if (current_time >= next_move_time)
            {
                current_page = (current_page + (pad.buttons & SCE_CTRL_RIGHT ? 1 : -1) + total_pages) % total_pages;
                current_delay = NORMAL_DELAY;
                next_move_time = current_time + current_delay * 250;
            }
        } else {
            was_holding_dpad = 0;
        }

        
        drawpage(current_page, total_pages);
    }

    vita2d_free_pgf(font);
    vita2d_fini();
    sceKernelExitProcess(0);

    return 0; // Moved outside the loop
}~~~

network.c<q>:
~~~
#include <curl/curl.h>
#include "network.h"

// Callback function to write downloaded data
size_t write_data(void *ptr, size_t size, size_t nmemb, void *stream) {
    size_t written = fwrite(ptr, size, nmemb, (FILE *)stream);
    return written;
}

void download_data(const char *url, const char *file_name) {
    CURL *curl_handle;
    FILE *pagefile;

    curl_global_init(CURL_GLOBAL_ALL);
    curl_handle = curl_easy_init();

    if (curl_handle) {
        curl_easy_setopt(curl_handle, CURLOPT_URL, url);
        curl_easy_setopt(curl_handle, CURLOPT_WRITEFUNCTION, write_data);

        pagefile = fopen(file_name, "wb");
        if (pagefile) {
            curl_easy_setopt(curl_handle, CURLOPT_WRITEDATA, pagefile);
            CURLcode res = curl_easy_perform(curl_handle);
            if (res != CURLE_OK) {
                fprintf(stderr, "curl_easy_perform() failed: %s\n", curl_easy_strerror(res));
            }
            fclose(pagefile);
        }

        curl_easy_cleanup(curl_handle);
    }

    curl_global_cleanup();
}
~~~

network.h<q>:
~~~

#ifndef NETWORK_H
#define NETWORK_H

#include <stdio.h>

void download_data(const char *url, const char *file_name);

#endif
~~~

